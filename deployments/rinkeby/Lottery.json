{
  "address": "0xf2Df839269d4b3b142792c72Fdd0CAa7d67c45b9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "VRFCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callBackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "timeInterval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Lottery_NotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery_TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lotteryBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numberOfPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "lotteryState",
          "type": "uint8"
        }
      ],
      "name": "Lottery_UpKeepNotNeeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__InsufficientFund",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "lotteryEntered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "requestedWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "winnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upKeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterLottery",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLotteryState",
      "outputs": [
        {
          "internalType": "enum Lottery.LotteryState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcc3520f1c834dd2df5a81ce9d1d595db983ce88d8214545f2acb83e5a8b2aa3e",
  "receipt": {
    "to": null,
    "from": "0xbe610D345a42493A63f6D53f0a1aBc88f3896F9b",
    "contractAddress": "0xf2Df839269d4b3b142792c72Fdd0CAa7d67c45b9",
    "transactionIndex": 6,
    "gasUsed": "1110771",
    "logsBloom": "0x
    "blockHash": "0x96bb20ab994ab67a022771d9d7359f9f8e360edfaf211c686eb7d9b872dd42c4",
    "transactionHash": "0xcc3520f1c834dd2df5a81ce9d1d595db983ce88d8214545f2acb83e5a8b2aa3e",
    "logs": [],
    "blockNumber": 10932202,
    "cumulativeGasUsed": "2204886",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6168499c0cFfCaCD319c818142124B7A15E857ab",
    "10000000000000000",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc",
    "0",
    "500000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "89b4062db67224cfe4d288dfc35e66ef",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"VRFCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callBackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"timeInterval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Lottery_NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery_TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lotteryBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"lotteryState\",\"type\":\"uint8\"}],\"name\":\"Lottery_UpKeepNotNeeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__InsufficientFund\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"lotteryEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"requestedWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"winnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upKeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterLottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryState\",\"outputs\":[{\"internalType\":\"enum Lottery.LotteryState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Robel T.\",\"details\":\"This implements chainlink VRF V2 and chainlink keepers\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Decentralized Lottery contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lottery.sol\":\"Lottery\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/Lottery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\n// Errors\\nerror Lottery__InsufficientFund();\\nerror Lottery_TransferFailed();\\nerror Lottery_NotOpen();\\nerror Lottery_UpKeepNotNeeded(\\n    uint256 lotteryBalance,\\n    uint256 numberOfPlayers,\\n    uint8 lotteryState\\n);\\n\\n/**\\n * @title Decentralized Lottery contract\\n * @author Robel T.\\n * @dev This implements chainlink VRF V2 and chainlink keepers\\n */\\ncontract Lottery is VRFConsumerBaseV2, KeeperCompatibleInterface {\\n    enum LotteryState {\\n        OPEN,\\n        CALCULATING\\n    }\\n\\n    // immutables\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    uint private immutable i_entranceFee;\\n    bytes32 private immutable i_keyHash;\\n    uint64 private immutable i_subscriptionId;\\n    uint32 private immutable i_callBackGasLimit;\\n    uint256 private immutable i_timeInterval;\\n\\n    // constants\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private constant NUM_WORDS = 1;\\n\\n    // storage\\n    address payable[] private s_players;\\n    LotteryState private s_lotteryState;\\n    uint256 private s_lastTimeStamp;\\n    address private s_latestWinner;\\n\\n    /* Events */\\n    event lotteryEntered(address indexed player);\\n    event requestedWinner(uint256 indexed requestId);\\n    event winnerPicked(address indexed winner);\\n\\n    constructor(\\n        address VRFCoordinatorV2,\\n        uint256 entranceFee,\\n        bytes32 keyHash,\\n        uint64 subscriptionId,\\n        uint32 callBackGasLimit,\\n        uint256 timeInterval\\n    ) VRFConsumerBaseV2(VRFCoordinatorV2) {\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(VRFCoordinatorV2);\\n        i_entranceFee = entranceFee;\\n        i_keyHash = keyHash;\\n        i_subscriptionId = subscriptionId;\\n        i_callBackGasLimit = callBackGasLimit;\\n        s_lotteryState = LotteryState.OPEN;\\n        s_lastTimeStamp = block.timestamp;\\n        i_timeInterval = timeInterval;\\n    }\\n\\n    function enterLottery() public payable {\\n        if (msg.value < i_entranceFee) {\\n            revert Lottery__InsufficientFund();\\n        }\\n        if (s_lotteryState != LotteryState.OPEN) {\\n            revert Lottery_NotOpen();\\n        }\\n        s_players.push(payable(msg.sender));\\n        emit lotteryEntered(msg.sender);\\n    }\\n\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    )\\n        public\\n        override\\n        returns (\\n            bool upKeepNeeded,\\n            bytes memory /* perform data */\\n        )\\n    {\\n        bool isOpen = s_lotteryState == LotteryState.OPEN;\\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) >\\n            i_timeInterval);\\n        bool hasPlayers = s_players.length > 0;\\n        bool hasBalance = address(this).balance > 0;\\n        upKeepNeeded = isOpen && timePassed && hasPlayers && hasBalance;\\n    }\\n\\n    function performUpkeep(\\n        bytes calldata /* performdata */\\n    ) external override {\\n        (bool upKeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        if (!upKeepNeeded) {\\n            revert Lottery_UpKeepNotNeeded(\\n                address(this).balance,\\n                s_players.length,\\n                uint8(s_lotteryState)\\n            );\\n        }\\n        s_lotteryState = LotteryState.CALCULATING;\\n        emit requestedWinner(\\n            i_vrfCoordinator.requestRandomWords(\\n                i_keyHash,\\n                i_subscriptionId,\\n                REQUEST_CONFIRMATIONS,\\n                i_callBackGasLimit,\\n                NUM_WORDS\\n            )\\n        );\\n    }\\n\\n    function fulfillRandomWords(uint256, uint256[] memory randomWords)\\n        internal\\n        override\\n    {\\n        uint256 winnerIndex = randomWords[0] % s_players.length;\\n        address payable latestWinner = s_players[winnerIndex];\\n        s_latestWinner = latestWinner;\\n\\n        (bool success, ) = latestWinner.call{value: address(this).balance}(\\\"\\\");\\n        if (!success) {\\n            revert Lottery_TransferFailed();\\n        }\\n        s_players = new address payable[](0);\\n        s_lastTimeStamp = block.timestamp;\\n        emit winnerPicked(latestWinner);\\n    }\\n\\n    // view functions\\n\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getLatestWinner() public view returns (address) {\\n        return s_latestWinner;\\n    }\\n\\n    function getLotteryState() public view returns (LotteryState) {\\n        return s_lotteryState;\\n    }\\n\\n    function getNumberOfPlayers() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n\\n    function getLatestTimeStamp() public view returns (uint256) {\\n        return s_lastTimeStamp;\\n    }\\n}\\n\",\"keccak256\":\"0xe537ce72ee48258958ae25b7dc6f6c08543e953c3325be830dc9b6af3761aa2f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b5060405162001663380380620016638339818101604052810190620000389190620002a0565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508573ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508460c081815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff1660c01b815250508163ffffffff166101208163ffffffff1660e01b815250506000600160006101000a81548160ff021916908360018111156200011957620001186200033c565b5b0217905550426002819055508061014081815250505050505050506200036b565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200016c826200013f565b9050919050565b6200017e816200015f565b81146200018a57600080fd5b50565b6000815190506200019e8162000173565b92915050565b6000819050919050565b620001b981620001a4565b8114620001c557600080fd5b50565b600081519050620001d981620001ae565b92915050565b6000819050919050565b620001f481620001df565b81146200020057600080fd5b50565b6000815190506200021481620001e9565b92915050565b600067ffffffffffffffff82169050919050565b62000239816200021a565b81146200024557600080fd5b50565b60008151905062000259816200022e565b92915050565b600063ffffffff82169050919050565b6200027a816200025f565b81146200028657600080fd5b50565b6000815190506200029a816200026f565b92915050565b60008060008060008060c08789031215620002c057620002bf6200013a565b5b6000620002d089828a016200018d565b9650506020620002e389828a01620001c8565b9550506040620002f689828a0162000203565b94505060606200030989828a0162000248565b93505060806200031c89828a0162000289565b92505060a06200032f89828a01620001c8565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160601c60a05160601c60c05160e0516101005160c01c6101205160e01c61014051611283620003e0600039600061056a0152600061042301526000610400015260006103df01526000818161020001526105d6015260006103a3015260008181610226015261027a01526112836000f3fe6080604052600436106100865760003560e01c80634fdd3b64116100595780634fdd3b64146101335780636b68c03c1461015e5780636e04ff0d14610189578063c1af5785146101c7578063fd6673f5146101d157610086565b806309bc33a71461008b5780631fe543e3146100b6578063320229eb146100df5780634585e33b1461010a575b600080fd5b34801561009757600080fd5b506100a06101fc565b6040516100ad9190610a15565b60405180910390f35b3480156100c257600080fd5b506100dd60048036038101906100d89190610bc9565b610224565b005b3480156100eb57600080fd5b506100f46102e4565b6040516101019190610a15565b60405180910390f35b34801561011657600080fd5b50610131600480360381019061012c9190610c80565b6102ee565b005b34801561013f57600080fd5b506101486104e7565b6040516101559190610d0e565b60405180910390f35b34801561016a57600080fd5b50610173610511565b6040516101809190610da0565b60405180910390f35b34801561019557600080fd5b506101b060048036038101906101ab9190610e70565b610528565b6040516101be929190610f5c565b60405180910390f35b6101cf6105d4565b005b3480156101dd57600080fd5b506101e6610743565b6040516101f39190610a15565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102d657337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016102cd929190610f8c565b60405180910390fd5b6102e0828261074f565b5050565b6000600254905090565b600061030860405180602001604052806000815250610528565b509050806103775747600080549050600160009054906101000a900460ff16600181111561033957610338610d29565b5b6040517f3465952000000000000000000000000000000000000000000000000000000000815260040161036e93929190610fd1565b60405180910390fd5b60018060006101000a81548160ff0219169083600181111561039c5761039b610d29565b5b02179055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610464959493929190611080565b602060405180830381600087803b15801561047e57600080fd5b505af1158015610492573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b691906110e8565b7fba7ad5e9e41a8cd52695da840afaaab622480f86ddd7986ff0e70fefae60019560405160405180910390a2505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600160009054906101000a900460ff16905090565b60006060600080600181111561054157610540610d29565b5b600160009054906101000a900460ff16600181111561056357610562610d29565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426105979190611144565b119050600080600080549050119050600080471190508380156105b75750825b80156105c05750815b80156105c95750805b955050505050915091565b7f000000000000000000000000000000000000000000000000000000000000000034101561062e576040517f44c9e44300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561064257610641610d29565b5b600160009054906101000a900460ff16600181111561066457610663610d29565b5b1461069b576040517f732acd4a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167ff2557515177df102d702a216fd18a4c7068b07027e7f8f2e90788dbdd2d97c6760405160405180910390a2565b60008080549050905090565b600080805490508260008151811061076a57610769611178565b5b602002602001015161077c91906111d6565b9050600080828154811061079357610792611178565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008173ffffffffffffffffffffffffffffffffffffffff164760405161082790611238565b60006040518083038185875af1925050503d8060008114610864576040519150601f19603f3d011682016040523d82523d6000602084013e610869565b606091505b50509050806108a4576040517faca80e4300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600067ffffffffffffffff8111156108bf576108be610a86565b5b6040519080825280602002602001820160405280156108ed5781602001602082028036833780820191505090505b5060009080519060200190610903929190610955565b50426002819055508173ffffffffffffffffffffffffffffffffffffffff167f794919b0f484b8e90b1b817ac7f880f846fbd8a9813dee2a378e820db094e3d160405160405180910390a25050505050565b8280548282559060005260206000209081019282156109ce579160200282015b828111156109cd5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610975565b5b5090506109db91906109df565b5090565b5b808211156109f85760008160009055506001016109e0565b5090565b6000819050919050565b610a0f816109fc565b82525050565b6000602082019050610a2a6000830184610a06565b92915050565b6000604051905090565b600080fd5b600080fd5b610a4d816109fc565b8114610a5857600080fd5b50565b600081359050610a6a81610a44565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610abe82610a75565b810181811067ffffffffffffffff82111715610add57610adc610a86565b5b80604052505050565b6000610af0610a30565b9050610afc8282610ab5565b919050565b600067ffffffffffffffff821115610b1c57610b1b610a86565b5b602082029050602081019050919050565b600080fd5b6000610b45610b4084610b01565b610ae6565b90508083825260208201905060208402830185811115610b6857610b67610b2d565b5b835b81811015610b915780610b7d8882610a5b565b845260208401935050602081019050610b6a565b5050509392505050565b600082601f830112610bb057610baf610a70565b5b8135610bc0848260208601610b32565b91505092915050565b60008060408385031215610be057610bdf610a3a565b5b6000610bee85828601610a5b565b925050602083013567ffffffffffffffff811115610c0f57610c0e610a3f565b5b610c1b85828601610b9b565b9150509250929050565b600080fd5b60008083601f840112610c4057610c3f610a70565b5b8235905067ffffffffffffffff811115610c5d57610c5c610c25565b5b602083019150836001820283011115610c7957610c78610b2d565b5b9250929050565b60008060208385031215610c9757610c96610a3a565b5b600083013567ffffffffffffffff811115610cb557610cb4610a3f565b5b610cc185828601610c2a565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610cf882610ccd565b9050919050565b610d0881610ced565b82525050565b6000602082019050610d236000830184610cff565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610d6957610d68610d29565b5b50565b6000819050610d7a82610d58565b919050565b6000610d8a82610d6c565b9050919050565b610d9a81610d7f565b82525050565b6000602082019050610db56000830184610d91565b92915050565b600080fd5b600067ffffffffffffffff821115610ddb57610dda610a86565b5b610de482610a75565b9050602081019050919050565b82818337600083830152505050565b6000610e13610e0e84610dc0565b610ae6565b905082815260208101848484011115610e2f57610e2e610dbb565b5b610e3a848285610df1565b509392505050565b600082601f830112610e5757610e56610a70565b5b8135610e67848260208601610e00565b91505092915050565b600060208284031215610e8657610e85610a3a565b5b600082013567ffffffffffffffff811115610ea457610ea3610a3f565b5b610eb084828501610e42565b91505092915050565b60008115159050919050565b610ece81610eb9565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610f0e578082015181840152602081019050610ef3565b83811115610f1d576000848401525b50505050565b6000610f2e82610ed4565b610f388185610edf565b9350610f48818560208601610ef0565b610f5181610a75565b840191505092915050565b6000604082019050610f716000830185610ec5565b8181036020830152610f838184610f23565b90509392505050565b6000604082019050610fa16000830185610cff565b610fae6020830184610cff565b9392505050565b600060ff82169050919050565b610fcb81610fb5565b82525050565b6000606082019050610fe66000830186610a06565b610ff36020830185610a06565b6110006040830184610fc2565b949350505050565b6000819050919050565b61101b81611008565b82525050565b600067ffffffffffffffff82169050919050565b61103e81611021565b82525050565b600061ffff82169050919050565b61105b81611044565b82525050565b600063ffffffff82169050919050565b61107a81611061565b82525050565b600060a0820190506110956000830188611012565b6110a26020830187611035565b6110af6040830186611052565b6110bc6060830185611071565b6110c96080830184611071565b9695505050505050565b6000815190506110e281610a44565b92915050565b6000602082840312156110fe576110fd610a3a565b5b600061110c848285016110d3565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061114f826109fc565b915061115a836109fc565b92508282101561116d5761116c611115565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006111e1826109fc565b91506111ec836109fc565b9250826111fc576111fb6111a7565b5b828206905092915050565b600081905092915050565b50565b6000611222600083611207565b915061122d82611212565b600082019050919050565b600061124382611215565b915081905091905056fea2646970667358221220e9d4c94c3c3488a2090c69a5ef962b067d6263b00fe471fbd94ea6062ab6ce6964736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100865760003560e01c80634fdd3b64116100595780634fdd3b64146101335780636b68c03c1461015e5780636e04ff0d14610189578063c1af5785146101c7578063fd6673f5146101d157610086565b806309bc33a71461008b5780631fe543e3146100b6578063320229eb146100df5780634585e33b1461010a575b600080fd5b34801561009757600080fd5b506100a06101fc565b6040516100ad9190610a15565b60405180910390f35b3480156100c257600080fd5b506100dd60048036038101906100d89190610bc9565b610224565b005b3480156100eb57600080fd5b506100f46102e4565b6040516101019190610a15565b60405180910390f35b34801561011657600080fd5b50610131600480360381019061012c9190610c80565b6102ee565b005b34801561013f57600080fd5b506101486104e7565b6040516101559190610d0e565b60405180910390f35b34801561016a57600080fd5b50610173610511565b6040516101809190610da0565b60405180910390f35b34801561019557600080fd5b506101b060048036038101906101ab9190610e70565b610528565b6040516101be929190610f5c565b60405180910390f35b6101cf6105d4565b005b3480156101dd57600080fd5b506101e6610743565b6040516101f39190610a15565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102d657337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016102cd929190610f8c565b60405180910390fd5b6102e0828261074f565b5050565b6000600254905090565b600061030860405180602001604052806000815250610528565b509050806103775747600080549050600160009054906101000a900460ff16600181111561033957610338610d29565b5b6040517f3465952000000000000000000000000000000000000000000000000000000000815260040161036e93929190610fd1565b60405180910390fd5b60018060006101000a81548160ff0219169083600181111561039c5761039b610d29565b5b02179055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610464959493929190611080565b602060405180830381600087803b15801561047e57600080fd5b505af1158015610492573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b691906110e8565b7fba7ad5e9e41a8cd52695da840afaaab622480f86ddd7986ff0e70fefae60019560405160405180910390a2505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600160009054906101000a900460ff16905090565b60006060600080600181111561054157610540610d29565b5b600160009054906101000a900460ff16600181111561056357610562610d29565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426105979190611144565b119050600080600080549050119050600080471190508380156105b75750825b80156105c05750815b80156105c95750805b955050505050915091565b7f000000000000000000000000000000000000000000000000000000000000000034101561062e576040517f44c9e44300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561064257610641610d29565b5b600160009054906101000a900460ff16600181111561066457610663610d29565b5b1461069b576040517f732acd4a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167ff2557515177df102d702a216fd18a4c7068b07027e7f8f2e90788dbdd2d97c6760405160405180910390a2565b60008080549050905090565b600080805490508260008151811061076a57610769611178565b5b602002602001015161077c91906111d6565b9050600080828154811061079357610792611178565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008173ffffffffffffffffffffffffffffffffffffffff164760405161082790611238565b60006040518083038185875af1925050503d8060008114610864576040519150601f19603f3d011682016040523d82523d6000602084013e610869565b606091505b50509050806108a4576040517faca80e4300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600067ffffffffffffffff8111156108bf576108be610a86565b5b6040519080825280602002602001820160405280156108ed5781602001602082028036833780820191505090505b5060009080519060200190610903929190610955565b50426002819055508173ffffffffffffffffffffffffffffffffffffffff167f794919b0f484b8e90b1b817ac7f880f846fbd8a9813dee2a378e820db094e3d160405160405180910390a25050505050565b8280548282559060005260206000209081019282156109ce579160200282015b828111156109cd5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610975565b5b5090506109db91906109df565b5090565b5b808211156109f85760008160009055506001016109e0565b5090565b6000819050919050565b610a0f816109fc565b82525050565b6000602082019050610a2a6000830184610a06565b92915050565b6000604051905090565b600080fd5b600080fd5b610a4d816109fc565b8114610a5857600080fd5b50565b600081359050610a6a81610a44565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610abe82610a75565b810181811067ffffffffffffffff82111715610add57610adc610a86565b5b80604052505050565b6000610af0610a30565b9050610afc8282610ab5565b919050565b600067ffffffffffffffff821115610b1c57610b1b610a86565b5b602082029050602081019050919050565b600080fd5b6000610b45610b4084610b01565b610ae6565b90508083825260208201905060208402830185811115610b6857610b67610b2d565b5b835b81811015610b915780610b7d8882610a5b565b845260208401935050602081019050610b6a565b5050509392505050565b600082601f830112610bb057610baf610a70565b5b8135610bc0848260208601610b32565b91505092915050565b60008060408385031215610be057610bdf610a3a565b5b6000610bee85828601610a5b565b925050602083013567ffffffffffffffff811115610c0f57610c0e610a3f565b5b610c1b85828601610b9b565b9150509250929050565b600080fd5b60008083601f840112610c4057610c3f610a70565b5b8235905067ffffffffffffffff811115610c5d57610c5c610c25565b5b602083019150836001820283011115610c7957610c78610b2d565b5b9250929050565b60008060208385031215610c9757610c96610a3a565b5b600083013567ffffffffffffffff811115610cb557610cb4610a3f565b5b610cc185828601610c2a565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610cf882610ccd565b9050919050565b610d0881610ced565b82525050565b6000602082019050610d236000830184610cff565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610d6957610d68610d29565b5b50565b6000819050610d7a82610d58565b919050565b6000610d8a82610d6c565b9050919050565b610d9a81610d7f565b82525050565b6000602082019050610db56000830184610d91565b92915050565b600080fd5b600067ffffffffffffffff821115610ddb57610dda610a86565b5b610de482610a75565b9050602081019050919050565b82818337600083830152505050565b6000610e13610e0e84610dc0565b610ae6565b905082815260208101848484011115610e2f57610e2e610dbb565b5b610e3a848285610df1565b509392505050565b600082601f830112610e5757610e56610a70565b5b8135610e67848260208601610e00565b91505092915050565b600060208284031215610e8657610e85610a3a565b5b600082013567ffffffffffffffff811115610ea457610ea3610a3f565b5b610eb084828501610e42565b91505092915050565b60008115159050919050565b610ece81610eb9565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610f0e578082015181840152602081019050610ef3565b83811115610f1d576000848401525b50505050565b6000610f2e82610ed4565b610f388185610edf565b9350610f48818560208601610ef0565b610f5181610a75565b840191505092915050565b6000604082019050610f716000830185610ec5565b8181036020830152610f838184610f23565b90509392505050565b6000604082019050610fa16000830185610cff565b610fae6020830184610cff565b9392505050565b600060ff82169050919050565b610fcb81610fb5565b82525050565b6000606082019050610fe66000830186610a06565b610ff36020830185610a06565b6110006040830184610fc2565b949350505050565b6000819050919050565b61101b81611008565b82525050565b600067ffffffffffffffff82169050919050565b61103e81611021565b82525050565b600061ffff82169050919050565b61105b81611044565b82525050565b600063ffffffff82169050919050565b61107a81611061565b82525050565b600060a0820190506110956000830188611012565b6110a26020830187611035565b6110af6040830186611052565b6110bc6060830185611071565b6110c96080830184611071565b9695505050505050565b6000815190506110e281610a44565b92915050565b6000602082840312156110fe576110fd610a3a565b5b600061110c848285016110d3565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061114f826109fc565b915061115a836109fc565b92508282101561116d5761116c611115565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006111e1826109fc565b91506111ec836109fc565b9250826111fc576111fb6111a7565b5b828206905092915050565b600081905092915050565b50565b6000611222600083611207565b915061122d82611212565b600082019050919050565b600061124382611215565b915081905091905056fea2646970667358221220e9d4c94c3c3488a2090c69a5ef962b067d6263b00fe471fbd94ea6062ab6ce6964736f6c63430008080033",
  "devdoc": {
    "author": "Robel T.",
    "details": "This implements chainlink VRF V2 and chainlink keepers",
    "kind": "dev",
    "methods": {},
    "title": "Decentralized Lottery contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 214,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 217,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_lotteryState",
        "offset": 0,
        "slot": "1",
        "type": "t_enum(LotteryState)192"
      },
      {
        "astId": 219,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 221,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_latestWinner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(LotteryState)192": {
        "encoding": "inplace",
        "label": "enum Lottery.LotteryState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}